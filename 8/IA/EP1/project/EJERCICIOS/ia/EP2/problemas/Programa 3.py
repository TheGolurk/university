# -*- coding: utf-8 -*-
"""Algoritmo Genetico para el problema de la mochila.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cIzJ68sE8mqoYsUIZgv8id05suj0wdMx
"""

#Algoritmo Genetico aplicado al problema de la mochila
'''
Paso 1: Generar poblacion inicial
Paso 2: Calcular el fitness
Paso 3: While(NG) Ciclo reproductivo #(Numero de generaciones "NG")
  Paso 3.1: Seleccion
  Paso 3.2: Cruza o recombinación
  Paso 3.3: Muta
  Paso 3.4: Evaluación o decodificación
'''

import math as mat
import random as rnd

def probSeleccion(fitness): #FUNCIONA
  pSeleccion=[]
  suma= sum(fitness)

  for i in fitness:
    pSeleccion.append(i/suma)
  print("PROB DE SELECCION:",pSeleccion)
  return pSeleccion


def selectRuleta(pSeleccion,poblacion): #NO FUNCIONA BIEN
  peso=[]
  maximo=15
  w=[12,1,4,1,2]
  pobSeleccionada=[]

  for i in poblacion:
    suma=0
    for j in range(len(i)):
      if i[j] == "1":
        suma += w[j]
    peso.append(suma)
    if suma <= maximo:
      for i in range(6):
        x = rnd.random()
        #print("VALOR DE 'X': ",x)
        #print("VALOR DE LA POBLACION SELECCIONADA:",pSeleccion[i])

        if (x>=0 and x<pSeleccion[0]):
          pobSeleccionada.append(poblacion[0])
        elif (x>=pSeleccion[0] and x<pSeleccion[0]+pSeleccion[1]):
          pobSeleccionada.append(poblacion[1])
        elif (x>=pSeleccion[0]+pSeleccion[1] and x<pSeleccion[0]+pSeleccion[1]+pSeleccion[2]):
          pobSeleccionada.append(poblacion[2])
        elif (x>=pSeleccion[0]+pSeleccion[1]+pSeleccion[2] and x<pSeleccion[0]+pSeleccion[1]+pSeleccion[2]+pSeleccion[3]):
          pobSeleccionada.append(poblacion[3])
        elif (x>=pSeleccion[0]+pSeleccion[1]+pSeleccion[2]+pSeleccion[3] and x<pSeleccion[0]+pSeleccion[1]+pSeleccion[2]+pSeleccion[3]+pSeleccion[4]):
          pobSeleccionada.append(poblacion[4])
        else:
          pobSeleccionada.append(poblacion[5])
      
    print("POBLACION NUEVA:  ",pobSeleccionada)

  return pobSeleccionada

def cruza(poblacion): #SE NECESITA LA SELECCION DE RULETA, POR ENDE NO FUNCIONA
  poblacionCruzada=[]
  probCruza = 0.8
  for i in range(2):
    ind1,ind2=0,0
    x = rnd.random()
    while(ind1==ind2):
      ind1 = rnd.randint(0,3)
      ind2 = rnd.randint(0,3)
    
    if (x<probCruza):
      ptoCruce = rnd.randint(0,4)
      #print(ptoCruce)

      poblacionCruzada.append(poblacion[ind1][0:ptoCruce]+poblacion[ind2][ptoCruce:5])
      poblacionCruzada.append(poblacion[ind2][0:ptoCruce]+poblacion[ind1][ptoCruce:5])

      #print(poblacionCruzada)
    else:
      poblacionCruzada.append(poblacion[ind1])
      poblacionCruzada.append(poblacion[ind2])
  return poblacionCruzada
  
def Muta(poblacion): #SE OCUPA LA MUTA, NO FUNCIONA
  poblacionMutada=[]
  probMuta = 0.2

  for i in range(4):
    individuo = ""
    x=rnd.random()

    if (x<probMuta):
      ptoMuta = rnd.randint(0,4)
      #print(ptoMuta)
      #print(poblacion[i])

      for index,gen in enumerate(poblacion[i]):
        if (index==ptoMuta):
          #hacer el intercambio
          if (gen == "0"):
            individuo+="1"
          else:
            individuo+="0"
        else:
          individuo+=gen
      poblacionMutada.append(individuo)
    else:
      poblacionMutada.append(poblacion[i])
  #print(poblacionMutada)
  return poblacionMutada

def evaluacion(poblacion): #FUNCIONA
  pobEvaluar=[]
  for i in poblacion:
    pobEvaluar.append(int(i,2))
  print(pobEvaluar)
  return pobEvaluar

'''
def calPeso (poblacion):
  peso=[]
  maximo=15
  w=[12,1,4,1,2]

  for i in poblacion:
    suma=0
    for j in range(len(i)):
      if i[j] == "1":
        suma += w[j]
      peso.append(suma)
  print("PESO:             ",peso)
  return peso
'''

def calFitness(poblacion): #FUNCIONA
  fitness=[]
  valor=[4,2,10,1,2]

  for i in poblacion:
    suma=0
    for j in range(len(i)):
      if i[j] == "1":
        suma += valor[j]
    fitness.append(suma)
    
  print("FITNESS:          ",fitness)
  return fitness

def pobInicial(): #FUNCIONA
  poblacion=[]
  for k in range (6):
    individuo=""
    for i in range(5):
      x = rnd.random()
      if x<=0.5:
        individuo+="1"
      else:
        individuo+="0"
    poblacion.append(individuo)
  print("POBLACION INICIAL:",poblacion)
  return poblacion


if __name__=="__main__":
  poblacion=pobInicial()
  fitness=calFitness(poblacion)
  #peso=calPeso (poblacion)
  pSeleccion=probSeleccion(fitness)
  selectRuleta(pSeleccion,poblacion)
  #longitud(poblacion)
  #NG=5
  #i=0

  #while(i<NG):
    #fitness=calFitness(poblacion)
    #print (fitness)
    #pSeleccion=probSeleccion(fitness)
    #poblacion=selectRuleta(pSeleccion,poblacion)
    #poblacion=cruza(poblacion)
    #poblacion=Muta(poblacion)
    #print(poblacion)
    #print(evaluacion(poblacion))
    #i+=1

